// Copyright 2011-2019, Jakob Bornecrantz.
// SPDX-License-Identifier: BSL-1.0
/*!
 * Simple bitmap font.
 *
 * @ingroup gfx
 */
module charge.gfx.bitmapfont;

import lib.gl.gl33;

import core = charge.core;
import math = charge.math;

import charge.gfx.gl;
import charge.gfx.draw;
import charge.gfx.texture;


/*!
 * Texture that can be used for fonts.
 */
global bitmapTexture: Texture2D;


struct BitmapState
{
	offX: int;
	offY: int;
	glyphWidth: int;
	glyphHeight: int;
}

enum tabSize = 4;


/*!
 * Computes the size of the bounding box for the given text.
 */
fn buildSize(ref s: BitmapState, text: scope const(ubyte)[],
               out width: uint, out height: uint)
{
	if (text is null) {
		return;
	}

	max, x, y: int;
	foreach (c; text) {
		switch (c) {
		case '\t':
			x += tabSize - (x % tabSize);
			break;
		case '\n':
			y++;
			goto case;
		case '\r':
			x = 0;
			break;
		default:
			max = x > max ? x : max;
			x++;
			break;
		}
	}

	width = cast(uint)((max + 1) * s.glyphWidth);
	height = cast(uint)((y + 1) * s.glyphHeight);
}

/*!
 * Builds the vertices in builder of the given text.
 * Uses quads, so for vertices per glyph.
 */
fn buildVertices(ref s: BitmapState, b: DrawVertexBuilder,
                 text: scope const(ubyte)[])
{
	x, y: int;
	foreach (c; text) {
		switch (c) {
		case '\t':
			x += (tabSize - (x % tabSize));
			break;
		case '\n':
			y++;
			goto case;
		case '\r':
			x = 0;
			break;
		default:
			X := s.offX + x * s.glyphWidth;
			Y := s.offY + y * s.glyphHeight;
			buildVertex(ref s, b, X, Y, c, math.Color4b.White);
			x++;
			break;
		}
	}
}

/*!
 * Builds the vertices in builder of the given text.
 * Uses quads, so for vertices per glyph.
 */
fn buildVerticesGrid(ref s: BitmapState, b: DrawVertexBuilder, stride: u32
                     data: scope const(u8)[], color: math.Color4b)
{
	x, y: int;
	foreach (c; data) {
		X := s.offX + x * s.glyphWidth;
		Y := s.offY + y * s.glyphHeight;
		buildVertex(ref s, b, X, Y, c, color);

		x++;
		//y++;
		if (cast(u32)x == stride) {
			x = 0;
			y++;
		}
	}
}

fn buildVertex(ref s: BitmapState, b: DrawVertexBuilder, x: int, y: int, c: ubyte, color: math.Color4b)
{
	dstX1 := cast(f32)x;
	dstY1 := cast(f32)y;
	dstX2 := cast(f32)(x + s.glyphWidth);
	dstY2 := cast(f32)(y + s.glyphHeight);

	srcX1 := (1.0f / 16.0f) * (c % 16);
	srcY1 := (1.0f / 16.0f) * (c / 16);
	srcX2 := (1.0f / 16.0f) + srcX1;
	srcY2 := (1.0f / 16.0f) + srcY1;

	fudge := 1.0f / 1024.0f;
	dstX1 -= fudge;
	dstY1 -= fudge;
	dstX2 += fudge;
	dstY2 += fudge;

	srcX1 += fudge;
	srcY1 += fudge;
	srcX2 -= fudge;
	srcY2 -= fudge;

	b.add(dstX1, dstY1, srcX1, srcY1, color);
	b.add(dstX1, dstY2, srcX1, srcY2, color);
	b.add(dstX2, dstY2, srcX2, srcY2, color);
	b.add(dstX2, dstY2, srcX2, srcY2, color);
	b.add(dstX2, dstY1, srcX2, srcY1, color);
	b.add(dstX1, dstY1, srcX1, srcY1, color);
}


/*
 *
 * Glyph texture setup code.
 *
 */

global this()
{
	core.addInitAndCloseRunners(initBitmap, closeBitmap);
}

import watt.io;

fn initBitmap()
{
	stack: u32[20480];
	foreach (y; 0 .. Height) {
		pos := y * Width;
		foreach (x; 0 .. Width) {
			dst := pos + x;
			src := x / 8;
			sub := x % 8;
			data := (glyphData[y][src] >> sub) & 1;
			stack[dst] = data ? 0xffffffffu : 0xff000000u;
		}
	}

	bitmapTexture = Texture2D.makeRGBA8("bitmapTexture", Width, Height, 1);
	id: GLuint = bitmapTexture.id;
	target: GLuint = bitmapTexture.target;
	format: GLuint = GL_RGBA;

	glCheckError();
	glBindTexture(target, bitmapTexture.id);
	glTexSubImage2D(
		bitmapTexture.target, // target
		0,                    // level
		0,                    // xoffset
		0,                    // yoffset
		Width,                // width
		Height,               // height
		GL_RGBA,              // format
		GL_UNSIGNED_BYTE,     // type
		cast(void*)stack.ptr);
	glBindTexture(target, 0);
	glCheckError();
}

fn closeBitmap()
{
	reference(ref bitmapTexture, null);
}

enum u32 Width = 128;
enum u32 Height = 160;
enum u32 GlyphWidth = 8;
enum u32 GlyphHeight = 10;
global glyphData: immutable(char)[][160] = [
	"\x00\x7e\x7e\x6c\x10\x38\x10\x00\xff\x00\x00\xf0\x3c\x00\xfe\x18",
	"\x00\x81\xff\xfe\x38\x7c\x38\x00\xff\x00\x00\xe0\x66\x00\xc6\xdb",
	"\x00\xa5\xdb\xfe\x7c\x38\x7c\x00\xff\x00\x00\xf0\x66\x00\xfe\x3c",
	"\x00\x81\xff\xfe\xfe\xfe\xfe\x18\xe7\x00\x00\xbe\x66\x00\xc6\xe7",
	"\x00\xbd\xc3\x7c\x7c\xfe\xfe\x3c\xc3\x00\x00\x33\x3c\x00\xc6\xe7",
	"\x00\x99\xe7\x38\x38\xd6\x7c\x3c\xc3\x00\x00\x33\x18\x00\xe6\x3c",
	"\x00\x81\xff\x10\x10\x10\x10\x18\xe7\x00\x00\x33\x7e\x00\x67\xdb",
	"\x00\x7e\x7e\x00\x00\x38\x38\x00\xff\x00\x00\x1e\x18\x00\x03\x18",
	"\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\xfe\x00\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x18\x00\x00\x7c\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x02\x80\x3c\x66\xfe\x86\x00\x3c\x18\x18\x00\x00\x00\x00\x00\x00",
	"\x0e\xe0\x7e\x66\xdb\x3c\x00\x7e\x3c\x18\x18\x0c\x00\x24\x18\xff",
	"\x3e\xf8\x18\x66\xdb\x66\x00\x18\x7e\x18\x30\x06\x06\x66\x3c\xff",
	"\xfe\xfe\x18\x66\xde\x66\x00\x7e\x18\x18\x7e\x3f\x06\xff\x7e\x7e",
	"\x3e\xf8\x7e\x66\xd8\x3c\x7e\x3c\x18\x7e\x30\x06\x06\x66\xff\x3c",
	"\x0e\xe0\x3c\x00\xd8\x61\x7e\x18\x18\x3c\x18\x0c\x7e\x24\xff\x18",
	"\x02\x80\x18\x66\xd8\x3e\x7e\xff\x18\x18\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x00\x18\x66\x6c\x18\x44\x18\x18\x30\x0c\x00\x00\x00\x00\x00\x40",
	"\x00\x18\x66\x6c\x7c\x2a\x24\x18\x08\x10\x00\x00\x00\x00\x00\x60",
	"\x00\x18\x66\xfe\x06\x2a\x38\x18\x0c\x30\x54\x18\x00\x00\x00\x30",
	"\x00\x18\x00\x6c\x3e\x14\x1c\x00\x0c\x30\x38\x18\x00\x00\x00\x18",
	"\x00\x18\x00\x6c\x7c\x28\x56\x00\x0c\x30\x7c\x7e\x00\x7e\x00\x0c",
	"\x00\x18\x00\xfe\x60\x54\x66\x00\x0c\x30\x38\x18\x00\x00\x00\x06",
	"\x00\x00\x00\x6c\x3e\x54\x26\x00\x08\x10\x54\x18\x18\x00\x18\x03",
	"\x00\x18\x00\x6c\x18\x22\xdc\x00\x30\x0c\x00\x00\x18\x00\x18\x01",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00",
	"\x3c\x1e\x3e\x3e\x06\x7e\x3c\x7e\x3c\x3c\x00\x00\x00\x00\x00\x3e",
	"\x66\x18\x60\x60\x36\x06\x06\x60\x66\x66\x18\x18\x20\x00\x04\x60",
	"\x66\x18\x60\x60\x36\x06\x06\x60\x66\x66\x18\x18\x10\x7c\x08\x60",
	"\x76\x18\x30\x38\x7e\x3e\x3e\x30\x3c\x66\x00\x00\x08\x00\x10\x38",
	"\x6e\x18\x18\x60\x30\x60\x66\x18\x3c\x7c\x00\x00\x04\x00\x20\x0c",
	"\x66\x18\x0c\x60\x30\x60\x66\x0c\x66\x60\x18\x18\x08\x7c\x10\x0c",
	"\x66\x18\x06\x60\x30\x60\x66\x0c\x66\x60\x18\x18\x10\x00\x08\x00",
	"\x3c\x7e\x7e\x3e\x30\x3e\x3c\x0c\x3c\x3c\x00\x10\x20\x00\x04\x0c",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x3c\x3c\x3e\x7c\x3e\x7e\x7e\x7c\x66\x7e\x60\x66\x06\xc6\x66\x3c",
	"\x66\x66\x66\x06\x66\x06\x06\x06\x66\x18\x60\x66\x06\xee\x6e\x66",
	"\x66\x66\x66\x06\x66\x06\x06\x06\x66\x18\x60\x36\x06\xd6\x6e\x66",
	"\x76\x7e\x3e\x06\x66\x1e\x1e\x76\x7e\x18\x60\x1e\x06\xd6\x76\x66",
	"\x76\x66\x66\x06\x66\x06\x06\x66\x66\x18\x66\x26\x06\xc6\x76\x66",
	"\x76\x66\x66\x06\x66\x06\x06\x66\x66\x18\x66\x66\x06\xc6\x66\x66",
	"\x06\x66\x66\x06\x66\x06\x06\x66\x66\x18\x66\x66\x06\xc6\x66\x66",
	"\x1c\x66\x3e\x7c\x3e\x7e\x06\x7c\x66\x7e\x3c\x66\x7e\xc6\x66\x3c",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x3e\x3c\x3e\x7c\x7e\x66\x66\xc6\x66\x66\x7e\x3c\x02\x3c\x18\x00",
	"\x66\x66\x66\x06\x18\x66\x66\xc6\x66\x66\x70\x0c\x06\x30\x3c\x00",
	"\x66\x66\x66\x06\x18\x66\x66\xc6\x3c\x66\x30\x0c\x0c\x30\x66\x00",
	"\x66\x66\x66\x3e\x18\x66\x66\xc6\x18\x24\x18\x0c\x18\x30\x00\x00",
	"\x3e\x66\x3e\x7c\x18\x66\x66\xc6\x18\x3c\x18\x0c\x30\x30\x00\x00",
	"\x06\x76\x66\x60\x18\x66\x24\xd6\x3c\x18\x0c\x0c\x60\x30\x00\x00",
	"\x06\x76\x66\x60\x18\x66\x3c\xd6\x66\x18\x0e\x0c\xc0\x30\x00\x00",
	"\x06\xfc\x66\x3e\x18\x3c\x18\x6c\x66\x18\x7e\x3c\x80\x3c\x00\x7e",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x18\x00\x06\x00\x60\x00\x78\x00\x06\x18\x60\x06\x1e\x00\x00\x00",
	"\x18\x00\x06\x00\x60\x00\x0c\x00\x06\x00\x00\x06\x18\x00\x00\x00",
	"\x30\x3c\x3e\x7c\x7c\x3c\x7e\x7c\x3e\x1e\x60\x66\x18\x6e\x3e\x3c",
	"\x00\x60\x66\x06\x66\x66\x0c\x66\x66\x18\x60\x36\x18\xd6\x66\x66",
	"\x00\x7c\x66\x06\x66\x66\x0c\x66\x66\x18\x60\x1e\x18\xd6\x66\x66",
	"\x00\x66\x66\x06\x66\x7e\x0c\x66\x66\x18\x60\x1e\x18\xc6\x66\x66",
	"\x00\x66\x66\x06\x66\x06\x0c\x66\x66\x18\x60\x36\x18\xc6\x66\x66",
	"\x00\x7c\x3e\x7c\x7c\x7c\x0c\x7c\x66\x70\x60\x66\x70\xc6\x66\x3c",
	"\x00\x00\x00\x00\x00\x00\x00\x62\x00\x00\x62\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x00\x3c\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x30\x18\x0c\x00\x00",
	"\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x18\x18\x18\x00\x00",
	"\x3e\x7c\x76\x7c\x7e\x66\x66\xc6\x66\x66\x7e\x08\x18\x10\x00\x18",
	"\x66\x66\x6e\x06\x0c\x66\x66\xc6\x66\x66\x70\x0c\x18\x30\x00\x18",
	"\x66\x66\x06\x3e\x0c\x66\x66\xc6\x24\x66\x30\x0c\x18\x30\x4c\x24",
	"\x66\x66\x06\x7c\x0c\x66\x66\xd6\x3c\x66\x0c\x08\x18\x10\x32\x24",
	"\x3e\x7c\x06\x60\x0c\x66\x24\xd6\x66\x66\x0e\x18\x18\x18\x00\x42",
	"\x06\x60\x06\x3e\x78\x7c\x18\x6c\x66\x7c\x7e\x30\x18\x0c\x00\x7e",
	"\x06\x60\x00\x00\x00\x00\x00\x00\x00\x62\x00\x00\x00\x00\x00\x00",
	"\x06\x60\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x00\x00\x00\x00\x00",
	"\x7c\x66\x30\x3c\x66\x0c\x18\x00\x3c\x66\x0c\x66\x3c\x0c\x66\x18",
	"\x06\x00\x18\x42\x00\x18\x18\x00\x42\x00\x18\x00\x42\x18\x00\x24",
	"\x06\x66\x3c\x3c\x3c\x3c\x3c\x7c\x3c\x3c\x3c\x1e\x00\x00\x3c\x3c",
	"\x06\x66\x66\x60\x60\x60\x60\x06\x66\x66\x66\x18\x1e\x18\x66\x66",
	"\x06\x66\x66\x7c\x7c\x7c\x7c\x06\x66\x66\x66\x18\x18\x18\x7e\x7e",
	"\x06\x66\x7e\x66\x66\x66\x66\x06\x7e\x7e\x7e\x18\x18\x18\x66\x66",
	"\x06\x66\x06\x66\x66\x66\x66\x06\x06\x06\x06\x18\x18\x18\x66\x66",
	"\x7c\x7c\x7c\x7c\x7c\x7c\x7c\x7c\x7c\x7c\x7c\x70\x70\x70\x66\x66",
	"\x10\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x0c\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x30\x00\x7c\x3c\x66\x0c\x3c\x0c\x66\x66\x66\x00\x00\x66\x1f\x70",
	"\x18\x00\x1a\x42\x00\x18\x42\x18\x00\x3c\x00\x18\x1c\x66\x33\xd8",
	"\x7e\x3c\x1a\x3c\x3c\x3c\x00\x00\x66\x66\x66\x7c\x36\x3c\x33\x18",
	"\x06\x5a\x7e\x66\x66\x66\x66\x66\x66\x66\x66\x06\x26\x7e\x5f\x3c",
	"\x1e\x5c\x1a\x66\x66\x66\x66\x66\x66\x66\x66\x06\x0f\x18\x63\x18",
	"\x06\x7a\x1a\x66\x66\x66\x66\x66\x66\x66\x66\x06\x06\x7e\xf3\x18",
	"\x06\x1a\x1a\x66\x66\x66\x66\x66\x66\x66\x66\x7c\x66\x18\x63\x1b",
	"\x7e\x6c\x7a\x3c\x3c\x3c\x7c\x7c\x7c\x3c\x3c\x18\x3f\x18\xe3\x0e",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x62\x00\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x3c\x00\x00\x00\x00\x00\x00\x00",
	"\x30\x18\x30\x30\x00\x00\x00\x00\x30\x00\x00\xc6\xc6\x18\x00\x00",
	"\x18\x0c\x18\x18\x4c\x4c\x7c\x3c\x00\x00\x00\x67\x67\x00\x00\x00",
	"\x3c\x00\x3c\x00\x32\x32\x66\x66\x30\x00\x00\x36\x36\x18\xcc\x33",
	"\x60\x0c\x66\x66\x00\x00\x66\x66\x30\x00\x00\x7e\x5e\x18\x66\x66",
	"\x7c\x0c\x66\x66\x3e\x6e\x7c\x3c\x1c\x7e\x7e\xcc\x6c\x18\x33\xcc",
	"\x66\x0c\x66\x66\x66\x7e\x00\x00\x06\x06\x60\x66\x56\x18\x66\x66",
	"\x66\x0c\x66\x66\x66\x76\x7e\x7e\x06\x06\x60\x33\xfb\x18\xcc\x33",
	"\x7c\x38\x3c\x7c\x66\x66\x00\x00\x7c\x00\x00\xf0\x60\x18\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x11\x55\xbb\x18\x18\x18\x6c\x00\x00\x6c\x6c\x00\x6c\x6c\x18\x00",
	"\x44\xaa\xee\x18\x18\x18\x6c\x00\x00\x6c\x6c\x00\x6c\x6c\x18\x00",
	"\x11\x55\xbb\x18\x18\x18\x6c\x00\x00\x6c\x6c\x00\x6c\x6c\x18\x00",
	"\x44\xaa\xee\x18\x18\x1f\x6c\x00\x1f\x6f\x6c\x7f\x6f\x6c\x1f\x00",
	"\x11\x55\xbb\x18\x18\x18\x6c\x00\x18\x60\x6c\x60\x60\x6c\x18\x00",
	"\x44\xaa\xee\x18\x1f\x1f\x6f\x7f\x1f\x6f\x6c\x6f\x7f\x7f\x1f\x1f",
	"\x11\x55\xbb\x18\x18\x18\x6c\x6c\x18\x6c\x6c\x6c\x00\x00\x00\x18",
	"\x44\xaa\xee\x18\x18\x18\x6c\x6c\x18\x6c\x6c\x6c\x00\x00\x00\x18",
	"\x11\x55\xbb\x18\x18\x18\x6c\x6c\x18\x6c\x6c\x6c\x00\x00\x00\x18",
	"\x44\xaa\xee\x18\x18\x18\x6c\x6c\x18\x6c\x6c\x6c\x00\x00\x00\x18",
	"\x18\x18\x00\x18\x00\x18\x18\x6c\x6c\x00\x6c\x00\x6c\x00\x6c\x18",
	"\x18\x18\x00\x18\x00\x18\x18\x6c\x6c\x00\x6c\x00\x6c\x00\x6c\x18",
	"\x18\x18\x00\x18\x00\x18\x18\x6c\x6c\x00\x6c\x00\x6c\x00\x6c\x18",
	"\x18\x18\x00\x18\x00\x18\xf8\x6c\xec\xfc\xef\xff\xec\xff\xef\xff",
	"\x18\x18\x00\x18\x00\x18\x18\x6c\x0c\x0c\x00\x00\x0c\x00\x00\x00",
	"\xf8\xff\xff\xf8\xff\xff\xf8\xec\xfc\xec\xff\xef\xec\xff\xef\xff",
	"\x00\x00\x18\x18\x00\x18\x18\x6c\x00\x6c\x00\x6c\x6c\x00\x6c\x00",
	"\x00\x00\x18\x18\x00\x18\x18\x6c\x00\x6c\x00\x6c\x6c\x00\x6c\x00",
	"\x00\x00\x18\x18\x00\x18\x18\x6c\x00\x6c\x00\x6c\x6c\x00\x6c\x00",
	"\x00\x00\x18\x18\x00\x18\x18\x6c\x00\x6c\x00\x6c\x6c\x00\x6c\x00",
	"\x6c\x00\x00\x6c\x18\x00\x00\x6c\x18\x18\x00\xff\x00\x0f\xf0\xff",
	"\x6c\x00\x00\x6c\x18\x00\x00\x6c\x18\x18\x00\xff\x00\x0f\xf0\xff",
	"\x6c\x00\x00\x6c\x18\x00\x00\x6c\x18\x18\x00\xff\x00\x0f\xf0\xff",
	"\x6c\xff\x00\x6c\xf8\xf8\x00\x6c\xff\x18\x00\xff\x00\x0f\xf0\xff",
	"\x6c\x00\x00\x6c\x18\x18\x00\x6c\x18\x18\x00\xff\x00\x0f\xf0\xff",
	"\xff\xff\xff\xfc\xf8\xf8\xfc\xff\xff\x1f\xf8\xff\xff\x0f\xf0\x00",
	"\x00\x18\x6c\x00\x00\x18\x6c\x6c\x18\x00\x18\xff\xff\x0f\xf0\x00",
	"\x00\x18\x6c\x00\x00\x18\x6c\x6c\x18\x00\x18\xff\xff\x0f\xf0\x00",
	"\x00\x18\x6c\x00\x00\x18\x6c\x6c\x18\x00\x18\xff\xff\x0f\xf0\x00",
	"\x00\x18\x6c\x00\x00\x18\x6c\x6c\x18\x00\x18\xff\xff\x0f\xf0\x00",
	"\x00\x1c\x7e\x00\x7e\x00\x00\x00\x7e\x3c\x00\x00\x00\x60\x00\x00",
	"\x00\x26\x66\x00\x66\x00\x00\x00\x18\x66\x00\x70\x00\x30\x70\x00",
	"\xdc\x26\x66\xfe\x0c\x7c\x66\x6c\x3c\x66\x7c\x18\x7e\x7e\x0c\x3c",
	"\x76\x36\x06\x6c\x18\x36\x66\x3a\x66\x7e\xc6\x30\xdb\xdb\x06\x66",
	"\x36\x66\x06\x6c\x18\x36\x66\x18\x66\x66\xc6\x7c\xdb\xdb\x7e\x66",
	"\x36\x66\x06\x6c\x0c\x36\x66\x18\x3c\x66\x6c\x66\x7e\x7e\x06\x66",
	"\x76\x66\x06\x6c\x66\x36\x66\x18\x18\x66\x6c\x66\x00\x06\x0c\x66",
	"\xdc\x36\x06\x6c\x7e\x1c\x3e\x18\x7e\x3c\xc6\x3c\x00\x03\x70\x66",
	"\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x38\x30\x00\x00\x00\x00\x00\xf0\x3e\x1e\x00\x00",
	"\x00\x18\x0c\x30\x6c\x30\x00\x00\x1c\x00\x00\x30\x66\x30\x00\x00",
	"\x7e\x18\x18\x18\x6c\x30\x18\x4c\x36\x00\x00\x30\x66\x18\x00\x00",
	"\x00\x7e\x30\x0c\x0c\x30\x00\x32\x36\x00\x00\x30\x66\x0c\x3c\x00",
	"\x7e\x18\x18\x18\x0c\x30\x7e\x00\x1c\x18\x18\x37\x66\x3e\x3c\x00",
	"\x00\x18\x0c\x30\x0c\x36\x00\x4c\x00\x18\x00\x36\x00\x00\x3c\x00",
	"\x7e\x00\x00\x00\x0c\x36\x18\x32\x00\x00\x00\x3c\x00\x00\x3c\x00",
	"\x00\x7e\x7e\x7e\x0c\x1c\x00\x00\x00\x00\x00\x38\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
];
